<?php 
namespace App\Controllers;

use CodeIgniter\Controller;
use App\Libraries\AppData;
use App\Libraries\Gu;
use App\Libraries\ItemLib;
use App\Libraries\BarcodeLib;
use App\Libraries\SaleLib;
use App\Libraries\ReceivingLib;
use App\Models\Appconfig;
use App\Models\Stock_location;
use App\Models\Branch;
use App\Models\Item;
use App\Models\Employee;
use App\Models\Module;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\Files\File;
use CodeIgniter\HTTP\Files\UploadedFile;




class Config extends SecureController
{
	protected $db;
    protected $appData;
    protected $employeeModel;
    protected $stockLocation;
	protected $branchModel;
    protected $item;
    protected $itemLib;
	protected $barcode_lib;
	protected $sale_lib;
	protected $receiving_lib;
	protected $module;

	public function __construct()
	{
		// $this->db = \Config\Database::connect();
		parent::__construct('config');
        $this->employeeModel=new Employee();
		$this->module=new Module();
        $this->stockLocation=new Stock_location();
		$this->branchModel=new Branch();
        $this->item=new Item();
        $this->itemLib=new ItemLib();
		$this->barcode_lib=new BarcodeLib();
		$this->sale_lib=new SaleLib();
		$this->receiving_lib=new ReceivingLib();

	}

	/*
	* This function loads all the licenses starting with the first one being OSPOS one
	*/
	private function _licenses()
	{
		return "";
		$i = 0;
		$various = FALSE;
		$license = array();

		$license[$i]['title'] = 'Open Source Point Of Sale ' . $this->appconfigModel->get('application_version');

		if(file_exists('license/COPYING'))
		{
			$license[$i]['text'] = $this->xss_clean(file_get_contents('license/COPYING', false, NULL, 0, 2000));
		}
		else
		{
			$license[$i]['text'] = 'COPYING file must be in OSPOS license directory. You are not allowed to use OSPOS application until the distribution copy of COPYING file is present.';
		}

		// read all the files in the dir license
		$dir = new \DirectoryIterator('license');

		foreach($dir as $fileinfo)
		{
			// license files must be in couples: .version (name & version) & .license (license text)
			if($fileinfo->isFile())
			{
				if($fileinfo->getExtension() == 'version')
				{
					++$i;

					$basename = 'license/' . $fileinfo->getBasename('.version');

					$license[$i]['title'] = $this->xss_clean(file_get_contents($basename . '.version', false, NULL, 0, 100));

					$license_text_file = $basename . '.license';

					if(file_exists($license_text_file))
					{
						$license[$i]['text'] = $this->xss_clean(file_get_contents($license_text_file , false, NULL, 0, 2000));
					}
					else
					{
						$license[$i]['text'] = $license_text_file . ' file is missing';
					}
				}
				elseif($fileinfo->getBasename() == 'LICENSES')
				{
					// set a flag to indicate that the LICENSES file is available and needs to be attached at the end
					$various = TRUE;
				}
			}
		}

		// attach the licenses from the LICENSES file generated by bower
		if($various)
		{
			++$i;
			$license[$i]['title'] = 'Plugins';
			$license[$i]['text'] = '';

			$file = file_get_contents('license/LICENSES');
			$array = json_decode($file, true);

			foreach($array as $key => $val)
			{
				if(is_array($val))
				{
					$license[$i]['text'] .= 'component: ' . $key . "\n";
					
					foreach($val as $key1 => $val1)
					{
						if(is_array($val1))
						{
							$license[$i]['text'] .= $key1 . ': ';

							foreach($val1 as $key2 => $val2)
							{
								$license[$i]['text'] .= $val2 . ' ';									
							}

							$license[$i]['text'] .= "\n";
						}
						else
						{
							$license[$i]['text'] .= $key1 . ': ' . $val1 . "\n";
						}
					}

					$license[$i]['text'] .= "\n";
				}
			}
			
			$license[$i]['text'] = $this->xss_clean($license[$i]['text']);
		}
		
		return $license;
	}

	private function _themes()
	{
		$themes = array();

		// read all themes in the dist folder
		$dir = new \DirectoryIterator('dist/bootswatch');

		foreach($dir as $dirinfo)
		{
			if($dirinfo->isDir() && !$dirinfo->isDot() && $dirinfo->getFileName() != 'fonts')
			{
				$themes[$dirinfo->getFileName()] = $dirinfo->getFileName();
			}
		}
		asort($themes);
		return $themes;
	}
	
	public function index($module_id = NULL)
	{
		$data = $this->data;
		$data['table_headers'] = $this->xss_clean(get_items_manage_table_headers());
		$data['stock_locations'] = $this->stockLocation->get_all()->getResultArray();
		$data['support_barcode'] = $this->barcode_lib->get_list_barcodes();
		$data['logo_exists'] = $this->appconfigModel->get('company_logo') != '';
		$data = $this->xss_clean($data);
		$data['licenses'] = $this->_licenses();
		$data['themes'] = $this->_themes();
		$data['barcode_lib']=$this->barcode_lib;

		return view('configs/manage',$data);
	}
	
	
public function save_info(){
   
    $upload_data = request()->getFile('company_logo');
	$newName = 'company_logo.png';
    $batch_save_data = [
        'company' => request()->getPost('company'),
		'company_logo'=>$newName,
        'address' => request()->getPost('address'),
        'phone' => request()->getPost('phone'),
        'email' => request()->getPost('email'),
        'fax' => request()->getPost('fax'),
        'website' => request()->getPost('website'),
        'test_mode' => request()->getPost('test_mode'),
        'return_policy' => request()->getPost('return_policy')
    ];
   
	$upload_data = request()->getFile('company_logo');

if ($upload_data && $upload_data->isValid() && !$upload_data->hasMoved())
{
   
    $destination = './uploads/' . $newName;
   $batch_save_data['company_logo']=$newName;
  
    // Check if the file already exists
    if (file_exists($destination)) {
        // Delete the previous file
        unlink($destination);
    }

    // Move the uploaded file to the new destination
    $upload_data->move('./uploads', $newName);

}

$appModel=$this->appconfigModel;
$result = $appModel->batch_save($batch_save_data);
    $success =  $result ? true : false;
    $message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
	echo json_encode(array('success' => $success, 'message' => $message));



}


	public function save_general()
	{
		$batch_save_data = array(
			'theme' => request()->getPost('theme'),
			'default_tax_1_rate' => parse_decimals(request()->getPost('default_tax_1_rate'),$this->appconfigModel->get_all()),
			'default_tax_1_name' => request()->getPost('default_tax_1_name'),
			'default_tax_2_rate' => parse_decimals(request()->getPost('default_tax_2_rate'),$this->appconfigModel->get_all()),
			'default_tax_2_name' => request()->getPost('default_tax_2_name'),
			'tax_included' => request()->getPost('tax_included') != NULL,
			'receiving_calculate_average_price' => request()->getPost('receiving_calculate_average_price') != NULL,
			'lines_per_page' => request()->getPost('lines_per_page'),
			'default_sales_discount' => request()->getPost('default_sales_discount'),
			'notify_horizontal_position' => request()->getPost('notify_horizontal_position'),
			'notify_vertical_position' => request()->getPost('notify_vertical_position'),
			'custom1_name' => request()->getPost('custom1_name'),
			'custom2_name' => request()->getPost('custom2_name'),
			'custom3_name' => request()->getPost('custom3_name'),
			'custom4_name' => request()->getPost('custom4_name'),
			'custom5_name' => request()->getPost('custom5_name'),
			'custom6_name' => request()->getPost('custom6_name'),
			'custom7_name' => request()->getPost('custom7_name'),
			'custom8_name' => request()->getPost('custom8_name'),
			'custom9_name' => request()->getPost('custom9_name'),
			'custom10_name' => request()->getPost('custom10_name')
		);

		$appModel=$this->appconfigModel;
     $result = $appModel->batch_save($batch_save_data);
    $success =  $result ? true : false;
    $message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
	echo json_encode(array('success' => $success, 'message' => $message));
	}

// 	public function check_number_locale() 
//   {
	
//     $number_locale = request()->getPost('number_locale');
//     $fmt = new \NumberFormatter($number_locale, \NumberFormatter::CURRENCY);

//     $currency_symbol = request()->getPost('currency_symbol');

//     if ($thousands_separator === 0) {
//         $fmt->setAttribute(\NumberFormatter::GROUPING_SEPARATOR_SYMBOL, intval('')); // Convert empty string to integer
//     }

//     $fmt->setSymbol(\NumberFormatter::CURRENCY_SYMBOL, $currency_symbol);
//     $number_local_example = $fmt->format(1234567890.12300);

//     echo json_encode([
//         'success' => $number_local_example !== false,
//         'number_locale_example' => $number_local_example,
//         'currency_symbol' => $currency_symbol,
//         'thousands_separator' => $fmt->getAttribute(\NumberFormatter::GROUPING_SEPARATOR_SYMBOL) !== ''
//     ]);
// }


public function check_number_locale()
{
    $number_locale = request()->getVar('number_locale');
    $fmt = new \NumberFormatter($number_locale, \NumberFormatter::CURRENCY);

    $currency_symbol = request()->getVar('currency_symbol');
    $thousands_separator = request()->getPost('thousands_separator') === "false" ? 0 : 1; // Convert to integer

    if ($thousands_separator === 0) {
        $fmt->setAttribute(\NumberFormatter::GROUPING_SEPARATOR_SYMBOL, intval('')); // Convert empty string to integer
    }

    $fmt->setSymbol(\NumberFormatter::CURRENCY_SYMBOL, $currency_symbol);
    $number_local_example = $fmt->format(1234567890.12300);

    echo json_encode([
        'success' => $number_local_example !== false,
        'number_locale_example' => $number_local_example,
        'currency_symbol' => $currency_symbol,
        'thousands_separator' => $fmt->getAttribute(\NumberFormatter::GROUPING_SEPARATOR_SYMBOL) !== ''
    ]);
}

	public function save_locale()
	{
		$batch_save_data = array(
			'currency_symbol' =>request()->getPost('currency_symbol'),
			'language' =>request()->getPost('language'),
			'timezone' =>request()->getPost('timezone'),
			'dateformat' =>request()->getPost('dateformat'),
			'timeformat' =>request()->getPost('timeformat'),
			'thousands_separator' =>request()->getPost('thousands_separator'),
			'number_locale' =>request()->getPost('number_locale'),	
			'currency_decimals' =>request()->getPost('currency_decimals'),
			'tax_decimals' =>request()->getPost('tax_decimals'),
			'quantity_decimals' =>request()->getPost('quantity_decimals'),
			'country_codes' =>request()->getPost('country_codes'),
			'payment_options_order' =>request()->getPost('payment_options_order')
		);
		
		$appModel=$this->appconfigModel;
		$result = $appModel->batch_save($batch_save_data);
			$success =  $result ? true : false;
			$message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
			echo json_encode(array('success' => $success, 'message' => $message));	
	}




	public function stock_locations() 
	{
		$stock_locations = $this->stockLocation->get_all()->getResultArray();
		
		$stock_locations = $this->xss_clean($stock_locations);

		return view('partial/stock_locations', array('stock_locations' => $stock_locations));
	} 
	
	private function _clear_session_state()
	{

		$this->sale_lib->clear_sale_location();
		$this->sale_lib->clear_all();
		
		$this->receiving_lib->clear_stock_source();
		$this->receiving_lib->clear_stock_destination();
		// $this->receiving_lib->clear_all();
	}
	
	public function save_locations()
{
	$this->db->transStart();;

	// dd(request()->getPost());
    $deletedLocations = $this->stockLocation->get_allowed_locations();
    
    foreach (request()->getPost() as $key => $value)
    {
		// print_r($key);
		// dd();
        if (str_contains($key, 'stock_location'))
        {
			$locationId = preg_replace("/.*?_(\d+)$/", "$1", $key);
			
           unset($deletedLocations[$locationId]);
			
		
            
            $locationData = [
                'location_name' => $value
            ];
            if ($this->stockLocation->saveStockLocation($locationData, $locationId)?true:false)
            {
                $this->_clear_session_state();
            }
        }
	
    }
    
    // Delete locations that are not present in the post data
    foreach ($deletedLocations as $locationId => $locationName)
    {
        $this->stockLocation->deleteStockLocation($locationId);
    }
	$this->db->transComplete();
		
	$success = $this->db->transStatus();
            
	$message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
			
			echo json_encode(array('success' => $success, 'message' => $message));

		}


    public function save_barcode()
    {
        $batch_save_data = array(
			'barcode_type' => request()->getPost('barcode_type'),
			'barcode_quality' => request()->getPost('barcode_quality'),
			'barcode_width' => request()->getPost('barcode_width'),
			'barcode_height' => request()->getPost('barcode_height'),
			'barcode_font' => request()->getPost('barcode_font'),
			'barcode_font_size' => request()->getPost('barcode_font_size'),
			'barcode_first_row' => request()->getPost('barcode_first_row'),
			'barcode_second_row' => request()->getPost('barcode_second_row'),
			'barcode_third_row' => request()->getPost('barcode_third_row'),
			'barcode_num_in_row' => request()->getPost('barcode_num_in_row'),
			'barcode_page_width' => request()->getPost('barcode_page_width'),
			'barcode_page_cellspacing' => request()->getPost('barcode_page_cellspacing'),
			'barcode_generate_if_empty' => request()->getPost('barcode_generate_if_empty') != NULL,
			'barcode_content' => request()->getPost('barcode_content')
        );

		$appModel=$this->appconfigModel;
		$result = $appModel->batch_save($batch_save_data);
			$success =  $result ? true : false;
			$message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
			echo json_encode(array('success' => $success, 'message' => $message));	
    }
    
    public function save_receipt()
    {
    	$batch_save_data = array (
			'receipt_template' => request()->getPost('receipt_template'),
			'receipt_show_taxes' => request()->getPost('receipt_show_taxes') != NULL,
			'receipt_show_total_discount' => request()->getPost('receipt_show_total_discount') != NULL,
			'receipt_show_description' => request()->getPost('receipt_show_description') != NULL,
			'receipt_show_serialnumber' => request()->getPost('receipt_show_serialnumber') != NULL,
			'print_silently' => request()->getPost('print_silently') != NULL,
			'print_header' => request()->getPost('print_header') != NULL,
			'print_footer' => request()->getPost('print_footer') != NULL,
			'print_top_margin' => request()->getPost('print_top_margin'),
			'print_left_margin' => request()->getPost('print_left_margin'),
			'print_bottom_margin' => request()->getPost('print_bottom_margin'),
			'print_right_margin' => request()->getPost('print_right_margin')
		);

    	
		$appModel=$this->appconfigModel;
		$result = $appModel->batch_save($batch_save_data);
			$success =  $result ? true : false;
			$message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
			echo json_encode(array('success' => $success, 'message' => $message));	
    }

   

	public function remove_logo()
	{
		$Appconfig = new Appconfig();
		$result = $Appconfig->batch_save(array('company_logo' => ''));
		
		echo json_encode(array('success' => $result));
	}
	public function save_branch()
	{
		$branch_data = array(	
			'branch_name' => request()->getPost('branch_name'),
			'branch_code' => request()->getPost('branch_code'),
			'branch_address' => request()->getPost('branch_address'),
			'branch_phone' => request()->getPost('branch_phone'),
			'system_code' => request()->getPost('system_code'),
			'strn' => request()->getPost('strn'),
			'ntn' => request()->getPost('ntn'),
			'fbr_bearer_token' => request()->getPost('fbr_bearer_token'),
			'fbr_post_url' => request()->getPost('fbr_post_url'),
			'fbr_pct_code' => request()->getPost('fbr_pct_code'),

			'fbr_bearer_token' => request()->getPost('fbr_bearer_token'),
			'fbr_pos_id' => request()->getPost('fbr_pos_id'),
		);

		$appModel=$this->appconfigModel;
		$result = $appModel->batch_save($branch_data);
			$success =  $result;
			$message = lang('config_lang.config_saved_' . ($success ? '' : 'un') . 'successfully');
			echo json_encode(array('success' => $success, 'message' => $message));	
	}

    
    public function backup_db()
    {
    	$employee_id = $this->employeeModel->get_logged_in_employee_info()->person_id;
    	if($this->employeeModel->has_module_grant('config', $employee_id))
    	{
    		$this->load->dbutil();

    		$prefs = array(
				'format' => 'zip',
				'filename' => 'ospos.sql'
    		);
    		 
    		$backup = $this->dbutil->backup($prefs);
    		 
			$file_name = 'ospos-' . date("Y-m-d-H-i-s") .'.zip';
    		$save = 'uploads/' . $file_name;
    		helper('download');
    		while(ob_get_level())
			{
    			ob_end_clean();
    		}

    		force_download($file_name, $backup);
    	}
    	else 
    	{
    		redirect('no_access/config');
    	}
    }
}
?>
